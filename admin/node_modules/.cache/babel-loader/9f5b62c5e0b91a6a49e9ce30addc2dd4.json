{"ast":null,"code":"import { loginFailure, loginStart, loginSuccess } from \"./userRedux\";\nimport { publicRequest, userRequest } from \"../requestMethods\";\nimport { getProductStart, getProductSuccess, getProductFailure, deleteProductStart, deleteProductSuccess, deleteProductFailure, updateProductStart, updateProductSuccess, updateProductFailure, addProductStart, addProductSuccess, addProductFailure } from \"./productRedux\";\nexport const login = async (dispatch, user) => {\n  dispatch(loginStart());\n\n  try {\n    const res = await publicRequest.post(\"/auth/login\", user);\n    dispatch(loginSuccess(res.data));\n  } catch (err) {\n    dispatch(loginFailure());\n  }\n};\nexport const getProducts = async dispatch => {\n  dispatch(getProductStart());\n\n  try {\n    const res = await publicRequest.get(\"/products\");\n    dispatch(getProductSuccess(res.data));\n  } catch (err) {\n    dispatch(getProductFailure());\n  }\n};\nexport const deleteProduct = async (id, dispatch) => {\n  dispatch(deleteProductStart());\n\n  try {\n    //const res = await userRequest.delete(`/products/${id}`);\n    dispatch(deleteProductSuccess(id));\n  } catch (err) {\n    dispatch(deleteProductFailure());\n  }\n};\nexport const updateProduct = async (id, product, dispatch) => {\n  dispatch(updateProductStart());\n\n  try {\n    //update\n    dispatch(updateProductSuccess({\n      id,\n      product\n    }));\n  } catch (err) {\n    dispatch(updateProductFailure());\n  }\n};\nexport const addProduct = async (product, dispatch) => {\n  dispatch(addProductStart());\n\n  try {\n    const res = await userRequest.post(`/products`, product);\n    dispatch(addProductSuccess(res.data));\n  } catch (err) {\n    dispatch(addProductFailure());\n  }\n};","map":{"version":3,"names":["loginFailure","loginStart","loginSuccess","publicRequest","userRequest","getProductStart","getProductSuccess","getProductFailure","deleteProductStart","deleteProductSuccess","deleteProductFailure","updateProductStart","updateProductSuccess","updateProductFailure","addProductStart","addProductSuccess","addProductFailure","login","dispatch","user","res","post","data","err","getProducts","get","deleteProduct","id","updateProduct","product","addProduct"],"sources":["C:/Users/ricar/Desktop/Projects/shop/admin/src/redux/apiCalls.js"],"sourcesContent":["import { loginFailure, loginStart, loginSuccess } from \"./userRedux\";\r\nimport { publicRequest, userRequest } from \"../requestMethods\";\r\nimport {\r\n  getProductStart,\r\n  getProductSuccess,\r\n  getProductFailure,\r\n  deleteProductStart,\r\n  deleteProductSuccess,\r\n  deleteProductFailure,\r\n  updateProductStart,\r\n  updateProductSuccess,\r\n  updateProductFailure,\r\n  addProductStart,\r\n  addProductSuccess,\r\n  addProductFailure\r\n} from \"./productRedux\"\r\n\r\nexport const login = async (dispatch, user) => {\r\n  dispatch(loginStart());\r\n  try {\r\n    const res = await publicRequest.post(\"/auth/login\", user);\r\n    dispatch(loginSuccess(res.data));\r\n  } catch (err) {\r\n    dispatch(loginFailure());\r\n  }\r\n};\r\n\r\nexport const getProducts = async (dispatch) => {\r\n  dispatch(getProductStart());\r\n  try {\r\n    const res = await publicRequest.get(\"/products\");\r\n    dispatch(getProductSuccess(res.data));\r\n  } catch (err) {\r\n    dispatch(getProductFailure());\r\n  }\r\n};\r\n\r\nexport const deleteProduct = async (id, dispatch) => {\r\n  dispatch(deleteProductStart());\r\n  try {\r\n    //const res = await userRequest.delete(`/products/${id}`);\r\n    dispatch(deleteProductSuccess(id));\r\n  } catch (err) {\r\n    dispatch(deleteProductFailure());\r\n  }\r\n};\r\n\r\nexport const updateProduct = async (id, product, dispatch) => {\r\n  dispatch(updateProductStart());\r\n  try {\r\n    //update\r\n    dispatch(updateProductSuccess({ id, product }));\r\n  } catch (err) {\r\n    dispatch(updateProductFailure());\r\n  }\r\n};\r\n\r\nexport const addProduct = async (product, dispatch) => {\r\n  dispatch(addProductStart());\r\n  try {\r\n    const res = await userRequest.post(`/products`, product);\r\n    dispatch(addProductSuccess(res.data));\r\n  } catch (err) {\r\n    dispatch(addProductFailure());\r\n  }\r\n};"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,UAAvB,EAAmCC,YAAnC,QAAuD,aAAvD;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,mBAA3C;AACA,SACEC,eADF,EAEEC,iBAFF,EAGEC,iBAHF,EAIEC,kBAJF,EAKEC,oBALF,EAMEC,oBANF,EAOEC,kBAPF,EAQEC,oBARF,EASEC,oBATF,EAUEC,eAVF,EAWEC,iBAXF,EAYEC,iBAZF,QAaO,gBAbP;AAeA,OAAO,MAAMC,KAAK,GAAG,OAAOC,QAAP,EAAiBC,IAAjB,KAA0B;EAC7CD,QAAQ,CAACjB,UAAU,EAAX,CAAR;;EACA,IAAI;IACF,MAAMmB,GAAG,GAAG,MAAMjB,aAAa,CAACkB,IAAd,CAAmB,aAAnB,EAAkCF,IAAlC,CAAlB;IACAD,QAAQ,CAAChB,YAAY,CAACkB,GAAG,CAACE,IAAL,CAAb,CAAR;EACD,CAHD,CAGE,OAAOC,GAAP,EAAY;IACZL,QAAQ,CAAClB,YAAY,EAAb,CAAR;EACD;AACF,CARM;AAUP,OAAO,MAAMwB,WAAW,GAAG,MAAON,QAAP,IAAoB;EAC7CA,QAAQ,CAACb,eAAe,EAAhB,CAAR;;EACA,IAAI;IACF,MAAMe,GAAG,GAAG,MAAMjB,aAAa,CAACsB,GAAd,CAAkB,WAAlB,CAAlB;IACAP,QAAQ,CAACZ,iBAAiB,CAACc,GAAG,CAACE,IAAL,CAAlB,CAAR;EACD,CAHD,CAGE,OAAOC,GAAP,EAAY;IACZL,QAAQ,CAACX,iBAAiB,EAAlB,CAAR;EACD;AACF,CARM;AAUP,OAAO,MAAMmB,aAAa,GAAG,OAAOC,EAAP,EAAWT,QAAX,KAAwB;EACnDA,QAAQ,CAACV,kBAAkB,EAAnB,CAAR;;EACA,IAAI;IACF;IACAU,QAAQ,CAACT,oBAAoB,CAACkB,EAAD,CAArB,CAAR;EACD,CAHD,CAGE,OAAOJ,GAAP,EAAY;IACZL,QAAQ,CAACR,oBAAoB,EAArB,CAAR;EACD;AACF,CARM;AAUP,OAAO,MAAMkB,aAAa,GAAG,OAAOD,EAAP,EAAWE,OAAX,EAAoBX,QAApB,KAAiC;EAC5DA,QAAQ,CAACP,kBAAkB,EAAnB,CAAR;;EACA,IAAI;IACF;IACAO,QAAQ,CAACN,oBAAoB,CAAC;MAAEe,EAAF;MAAME;IAAN,CAAD,CAArB,CAAR;EACD,CAHD,CAGE,OAAON,GAAP,EAAY;IACZL,QAAQ,CAACL,oBAAoB,EAArB,CAAR;EACD;AACF,CARM;AAUP,OAAO,MAAMiB,UAAU,GAAG,OAAOD,OAAP,EAAgBX,QAAhB,KAA6B;EACrDA,QAAQ,CAACJ,eAAe,EAAhB,CAAR;;EACA,IAAI;IACF,MAAMM,GAAG,GAAG,MAAMhB,WAAW,CAACiB,IAAZ,CAAkB,WAAlB,EAA8BQ,OAA9B,CAAlB;IACAX,QAAQ,CAACH,iBAAiB,CAACK,GAAG,CAACE,IAAL,CAAlB,CAAR;EACD,CAHD,CAGE,OAAOC,GAAP,EAAY;IACZL,QAAQ,CAACF,iBAAiB,EAAlB,CAAR;EACD;AACF,CARM"},"metadata":{},"sourceType":"module"}